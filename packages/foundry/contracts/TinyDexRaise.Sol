//SPDX-License-Identifier: MIT
pragma solidity >=0.8.0 <0.9.0;

// Useful for debugging. Remove when deploying to a live network.
import "forge-std/console.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
// import { ChainId, Token } from '@uniswap/sdk-core';
// import { Pair, Trade, Route } from '@uniswap/v2-sdk';

// Use openzeppelin to inherit battle-tested implementations (ERC20, ERC721, etc)
// import "@openzeppelin/contracts/access/Ownable.sol";

/**
 * 
 * @author Formula Zero
 */
contract TinyDexRaise {
    // State Variables
    address public owner;
    address public aaveAddress;
    mapping(address => uint256) public tokenBalances;

    event SwapExecuted(
        address indexed swapExecutor,
        address tokenFrom,
        address tokenTo,
        uint256 valueFrom,
        uint256 valueTo
    );

    event DepositMade(
        address indexed depositor, 
        address indexed token, 
        uint256 amount
    );

    // Check packages/foundry/deploy/Deploy.s.sol
    constructor(address _owner, address _aaveAddress) {
        owner = _owner;
        aaveAddress = _aaveAddress;
    }

    // Modifier: used to define a set of rules that must be met before or after a function is executed
    // Check the withdraw() function
    modifier onlyOwner() {
        // msg.sender: predefined variable that represents address of the account that called the current function
        require(msg.sender == owner, "Not the Owner");
        _;
    }

    function deposit(address token, uint256 _amount, uint256 _deadline, uint8 v, bytes32 r, bytes32 s) public {
        require(_amount > 0, "Amount must be greater than 0");
        
        IERC20Permit(token).permit(
            msg.sender,
            address(this),
            _amount,
            _deadline,
            v,
            r,
            s
        );

        IERC20(token).transferFrom(msg.sender, address(this), _amount);

        emit DepositMade(msg.sender, token, _amount);
    }

    function swap(address _token) public {
        // Swap logic here ...
        // ETH = UniswapSWAP(_tokenFrom, _tokenTo, tokenBalances[_tokenFrom]);
        uint256 _amount = tokenBalances[_token];
        tokenBalances[_token] = 0;

        emit SwapExecuted(msg.sender, _token, raiseToken, _amount, 100);
    }

    function withdraw() onlyOwner public {
        IERC20(raiseToken).transfer(owner, raiseAmount);
    }

    /**
     * Function that allows the contract to receive ETH
     */
    receive() external payable {}
}
